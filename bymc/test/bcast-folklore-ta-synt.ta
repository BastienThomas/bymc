/* a template for the folklore reliable broadcast */

skel Proc {
  /* the control locations are as follows:
    0 is the initial state with value 0,
    1 is the initial state with value 1,
    2 is the crashed state,
    3 is the accepting state
   */
  local pc;
  /* the number of messages sent by the correct
     and crashed processes (the crashed processes can send their messages
     right before crashing) */
  shared nsnt, nsntF, nfaulty;
  parameters N, F;
  unknowns a1, b1, a2, b2; /* the constants to be found by synthesis */
  assumptions (1) {
    N > 1;
    N > F + 1;
  }

  locations (4) {
    loc0: [0]; /* initialized with value 0 */
    loc1: [1]; /* initialized with value 1 */
    loc2: [2]; /* crashed */
    loc3: [3]; /* accepted */
  }

  inits (5) {
    (loc0 + loc1) == N;
    loc2 == 0;
    loc3 == 0;
    nsnt == 0;
    nsntF == 0;
  }

  rules (8) {
  /* crashing without sending a message */
  0: loc0 -> loc2
      when (nfaulty < F)
      do { nsnt' == nsnt; nsntF' == nsntF; nfaulty' == nfaulty + 1; };
  1: loc1 -> loc2
      when (nfaulty < F)
      do { nsnt' == nsnt; nsntF' == nsntF; nfaulty' == nfaulty + 1; };
  /* crashing after sending a message */
  2: loc1 -> loc2
      when (nfaulty < F)
      do { nsnt' == nsnt; nsntF' == nsntF + 1; nfaulty' == nfaulty + 1; };
  /* crashing when in the accepting state */
  3: loc3 -> loc2
      when (nfaulty < F)
      do { nsnt' == nsnt; nsntF' == nsntF; nfaulty' == nfaulty + 1; };
  /* sending a message and accepting when initialized with value 1 */
  4: loc1 -> loc3
      when (nsnt >= a1 * N + b1)
      do { nsnt' == nsnt + 1; nsntF' == nsntF; nfaulty' == nfaulty; };
  /* sending a message and accepting when initialized with value 0 */
  5: loc0 -> loc3
      when (nsnt >= a2 * N + b2)
      do { nsnt' == nsnt + 1; nsntF' == nsntF; nfaulty' == nfaulty; };
  /* self-loops in all the locations but loc1, from which processes must progress */
  6: loc0 -> loc0
      when (nsnt >= 0)
      do { nsnt' == nsnt; nsntF' == nsntF; nfaulty' == nfaulty; };
  /*
  7: loc3 -> loc3
      when (nsnt >= 0)
      do { nsnt' == nsnt; nsntF' == nsntF; nfaulty' == nfaulty; };
   */
  }
  specifications (3) {
    /* safety */
    unforg: (loc1 == 0) -> [](loc3 == 0);
    /* the following two liveness properties require the following fairness constraint:
       if nsnt > 0, then every process should eventually leave the location loc0.
     */
    corr: <>[](((nsnt < a2 * N + b2) || loc0 == 0)
            && ((nsnt < a1 * N + b1) || loc1 == 0))
        -> ((loc0 == 0) -> <>(loc3 != 0));
    relay: <>[](((nsnt < a2 * N + b2) || loc0 == 0)
            && ((nsnt < a1 * N + b1) || loc1 == 0))
        -> []((loc3 != 0) -> <>((loc0 == 0) && (loc1 == 0)));
  }
} /* Proc */

/*
#BEGIN-TEST correct-unforg
$bymc_dir/verifypa-post ${testsource} unforg -O smt.log=1
#EXPECT grep "verified in 0 refinement" ${testlog}
#END-TEST

#BEGIN-TEST correct-corr
$bymc_dir/verifypa-post ${testsource} corr -O smt.log=1
#EXPECT grep "verified in 0 refinement" ${testlog}
#END-TEST

#BEGIN-TEST correct-relay
$bymc_dir/verifypa-post ${testsource} relay -O smt.log=1
#EXPECT grep "verified in 0 refinement" ${testlog}
#END-TEST
*/
