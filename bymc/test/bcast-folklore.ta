/* a template for the folklore reliable broadcast */

skel Proc {
  /* the control locations are as follows:
    0 is the initial state with value 0,
    1 is the initial state with value 1,
    2 is the crashed state,
    3 is the accepting state
   */
  local pc;
  /* the number of messages sent by the correct
     and crashed processes (the crashed processes can send their messages
     right before crashing) */
  shared nsnt, nsntF;
  parameters N;
  assumptions (1) {
    N > 1;
  }

  locations (7) {
    loc0: [0];
    loc1: [1];
    loc2: [2];
    loc3: [3];
  }

  inits (8) {
    (loc0 + loc1) == N;
    loc2 == 0;
    loc3 == 0;
    nsnt == 0;
    nsntF == 0;
  }

  rules (9) {
  /* crashing without sending a message */
  0: loc0 -> loc2
      when (1)
      do { nsnt' == nsnt; nsntF' == nsntF };
  1: loc1 -> loc2
      when (1)
      do { nsnt' == nsnt; nsntF' == nsntF };
  /* crashing after sending a message */
  2: loc0 -> loc2
      when (1)
      do { nsnt' == nsnt; nsntF' == nsntF + 1 };
  3: loc1 -> loc2
      when (1)
      do { nsnt' == nsnt; nsntF' == nsntF + 1 };
  /* sending a message and accepting when initialized with value 1 */
  4: loc1 -> loc3
      when (1)
      do { nsnt' == nsnt + 1; nsntF' == nsntF };
  /* sending a message and accepting when initialized with value 0 */
  5: loc0 -> loc3
      when (nsnt + nsntF >= 1)
      do { nsnt' == nsnt + 1; nsntF' == nsntF };
  /* self-loops in all the locations but loc1, from which processes must progress */
  6: loc0 -> loc0
      when (1)
      do { nsnt' == nsnt; nsntF' == nsntF };
  7: loc2 -> loc2
      when (1)
      do { nsnt' == nsnt; nsntF' == nsntF };
  8: loc3 -> loc3
      when (1)
      do { nsnt' == nsnt; nsntF' == nsntF };
  }
  specifications (3) {
    /* safety */
    unforg: (loc1 == 0) -> [](loc3 == 0);
    /* the following two liveness properties require the following fairness constraint:
       if nsnt > 0, then every process should eventually leave the location loc0.
     */
    corr: (<>[](nsnt == 0 || loc0 == 0))
        -> ((loc0 == 0) -> <>(loc3 != 0));
    relay: (<>[](nsnt == 0 || loc0 == 0))
        -> []((loc3 != 0) -> <>((loc0 == 0) && (loc1 == 0));
  }
} /* Proc */
