#!/bin/bash
#
# Run the abstraction refinement loop with nusmv in bmc mode
#
# Igor Konnov, 2013-2014

DEPTH=10
NUSMV_VERBOSE=0
ONE_SHOT=0
NO_REACH=0
COMPLETENESS=0
NO_UNROLLING=0
LINGELING=0
PLINGELING=0
SKEL=0
NO_LOOPBACK=0
NO_JUSTICE=0
ONE_SHOT_LEN=0
MEM_LIMIT="unlimited"
TIME_LIMIT="unlimited"
STACK_LIMIT="$((92*1024))" # recursion in nusmv needs larger stack

# parse options
TEMPOPTS=`POSIXLY_CORRECT=1 getopt -o hk:K:w: --long help,length:,nusmv-verbose:,one-shot,lingeling:,plingeling:,custom-sat:,skel,voodoo,no-reach,no-initial,no-loopback,no-justice,completeness,limit-time:,limit-mem:,limit-stack: -n '$@' -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

function help_and_quit() {
    echo "use $0 <switches> prog spec <bymc_switches>"
    echo " where the switches are"
    echo "  -k|--length k: limit the BMC search with length k"
    echo "  -K K: limit the custom solver with length K"
    echo "  -w|--nusmv-verbose <level>: set the verbosity level"
    echo "  --one-shot: instead of incremental BMC, check one-shot problem for the length"
    echo "  --lingeling <large_k>: do refinement on k steps, then"
    echo "      generate one shot problem for large_k steps and check it with lingeling"
    echo "  --custom-sat command: do refinement on k steps, then generate one"
    echo "          shot problem for K (use -K) and check it with command"
    echo "  --plingeling nworkers: use plingeling with nworkers"
    echo "  --skel: build symbolic skeleton first"
    echo "  --voodoo: same as --skel"
    echo "  --no-reach: skip reachability analysis (may re-use the old one)"
    echo "  --no-initial: skip the initial abstraction, i.e., re-use the old one"
    echo "  --no-loopback: do not generate loopback (reachability only)"
    echo "  --no-justice: remove justice constraints"
    echo "  --completeness: enable the completeness check (by NuSMV)"
    echo "  --no-unrolling: no virtual unrolling (by NuSMV)"
    echo "  --limit-time: limit (in seconds) cpu time of subprocesses (ulimit -t)"
    echo "  --limit-mem: limit (in MB) virtual memory of subprocesses (ulimit -v)"
    echo "  --limit-stack: limit (in MB) stack of subprocesses (ulimit -v)"
    echo "  -h|--help: show this help message"
    exit 1
}

eval set -- "$TEMPOPTS"
while true ; do
    case "$1" in
    -k|--length) DEPTH=$2 ; shift 2 ;;
    -K) ONE_SHOT_LEN=$2 ; shift 2 ;;
    -w|--nusmv-verbose) NUSMV_VERBOSE=$2 ; shift 2 ;;
    --one-shot) ONE_SHOT=1 ; shift 1 ;;
    --lingeling) ONE_SHOT_LEN=$2; CUSTOM_SAT="lingeling"; shift 2 ;;
    --plingeling) PLINGELING=$2 ; shift 2 ;;
    --custom-sat) CUSTOM_SAT=$2 ; shift 2 ;;
    --skel) SKEL=1 ; shift 1 ;;
    --voodoo) SKEL=1 ; shift 1 ;;
    --no-reach) NO_REACH=1 ; shift 1 ;;
    --no-initial) NO_INITIAL=1 ; shift 1 ;;
    --no-loopback) NO_LOOPBACK=1 ; shift 1 ;;
    --no-justice) NO_JUSTICE=1 ; shift 1 ;;
    --completeness) COMPLETENESS=1 ; shift 1 ;;
    --no-unrolling) NO_UNROLLING=1 ; shift 1 ;;
    --limit-time) TIME_LIMIT=$2 ; shift 2 ;;
    --limit-mem) MEM_LIMIT=$((1024*$2)) ; shift 2 ;;
    --limit-stack) STACK_LIMIT=$((1024*$2)) ; shift 2 ;;
    -h|--help) help_and_quit ;;
    --) shift ; break ;;
    *) echo "Internal error!" ; help_and_quit ;;
    esac
done

if [ "$#" -lt 2 ]; then
    help_and_quit
fi

echo ulimit -SHv $MEM_LIMIT
ulimit -SHv $MEM_LIMIT
echo ulimit -SHt $TIME_LIMIT
ulimit -SHt $TIME_LIMIT
echo ulimit -s $STACK_LIMIT
ulimit -s $STACK_LIMIT

PROG=$1
SPEC=$2
shift 2
export BYMC_FLAGS="$@ $BYMC_FLAGS"

# run the tool
export TARGET_MC=nusmv-bmc
export DEPTH NUSMV_VERBOSE ONE_SHOT NO_REACH NO_INITIAL COMPLETENESS
export NO_UNROLLING PLINGELING SKEL ONE_SHOT_LEN CUSTOM_SAT
export NO_JUSTICE NO_LOOPBACK
`dirname $0`/script/refinement-loop.sh "$PROG" "$SPEC"

