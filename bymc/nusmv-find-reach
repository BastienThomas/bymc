#!/usr/bin/python
#
# Find reachable locations using the special encoding in nusmv
#
# Igor Konnov, 2013

import os
import re
import sys

def collect_invar_names(filename):
    invars = []
    spec_re = re.compile('^INVARSPEC NAME r_(.*) := .*;$')
    fin = open(filename, "r")
    try:
        for line in fin:
            m = spec_re.match(line)
            if m:
                invars.append(m.group(1))
    finally:
        fin.close()

    return invars


def collect_unreachable(filename, invars):
    reachable = []
    unreachable = []
    spec_re = re.compile('^-- invariant.*is (false|true)$')
    fin = open(filename, "r")
    i = 0
    try:
        for line in fin:
            m = spec_re.match(line)
            if m:
                if m.group(1) == "true":
                    unreachable.append(invars[i])
                else:
                    reachable.append(invars[i])

                i += 1
    finally:
        fin.close()

    return (reachable, unreachable)


def exclude_lines(in_filename, out_filename, unreachable):
    fin = open(in_filename, "r")
    fout = open(out_filename, "w+")
    try:
        for line in fin:
            name = line.strip()
            if name[0] == "#" and name[1:] in unreachable:
                fout.write(line[1:])
            else:
                fout.write(line)
    finally:
        fout.close()
        fin.close()


OUT_FILENAME = 'nusmv.out'

if __name__ == '__main__':
    try:
        args = sys.argv[1:]
        nusmv, smvf, hiddenf = args 
    except ValueError:
        print "Use: find-reach nusmv smv-filename hidden-filename"
        sys.exit(99)

    status = os.system("%s -dcx -df -ils -is -v 1 main-ssa-reach.smv >%s" \
            % (nusmv, OUT_FILENAME))

    if status != 0:
        print "Abnormal termination of %s" % nusmv
        sys.exit(1)

    invars = collect_invar_names(smvf)
    reachable, unreachable = collect_unreachable(OUT_FILENAME, invars)
    exclude_lines(hiddenf, 'hidden.new', unreachable)
    print "%d counters are globally zero, and %d are not" \
            % (len(unreachable), len(reachable))
    os.remove(hiddenf)
    os.rename('hidden.new', hiddenf)

