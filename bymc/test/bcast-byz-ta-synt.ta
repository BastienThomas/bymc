/* a template for the ST reliable broadcast */

skel Proc {
  /* the control locations are as follows:
    0 is the initial state with value 0,
    1 is the initial state with value 1,
    2 is the sent state,
    3 is the accepting state
   */
  local pc;
  /* the number of messages sent by the correct processes */
  shared nsnt;
  parameters N, T, F;
  unknowns a1, b1, c1, a2, b2, c2; /* the constants to be found by synthesis */

  assumptions (0) {
    (b2 != 2);
    N > 3 * T;
    T >= F;
    T >= 1;
  }

  locations (0) {
    loc0: [0];
    loc1: [1];
    loc2: [2];
    loc3: [3];
  }

  inits (0) {
    (loc0 + loc1) == N - F;
    loc2 == 0;
    loc3 == 0;
    nsnt == 0;
  }

  rules (8) {
  /* send a message when having value 1 */
  0: loc1 -> loc2
      when (nsnt >= 0)
      do { nsnt' == nsnt + 1; };
  /* accept directly */
  1: loc0 -> loc3
      when (nsnt >= (a2 * N + b2 * T + c2 - F))
      do { nsnt' == nsnt + 1; };
  2: loc1 -> loc3
      when (nsnt >= a2 * N + b2 * T + c2 - F)
      do { nsnt' == nsnt + 1; };
  /* send a message */
  3: loc0 -> loc2
      when (nsnt >= a1 * N + b1 * T + c1 - F)
      do { nsnt' == nsnt + 1; };
  /* accept */
  4: loc2 -> loc3
      when (nsnt >= a2 * N + b2 * T + c2 - F)
      do { nsnt' == nsnt; };
  /* self-loops in all the locations but loc1, from which processes must progress */
  5: loc0 -> loc0
      when (nsnt >= 0)
      do { nsnt' == nsnt; };
  6: loc2 -> loc2
      when (nsnt >= 0)
      do { nsnt' == nsnt; };
  7: loc3 -> loc3
      when (nsnt >= 0)
      do { nsnt' == nsnt; };
  }
  specifications (3) {
    /* safety */
    unforg: (loc1 == 0) -> [](loc3 == 0);
    corr: <>[]((nsnt < a1 * N + b1 * T + c1 || loc0 == 0)
                && (nsnt < a2 * N + b2 * T + c2 || loc0 == 0)
                && ((nsnt < a2 * N + b2 * T + c2) || loc2 == 0)
                && (loc1 == 0))
        -> ((loc0 == 0) -> <>(loc3 != 0));
    relay: <>[]((nsnt < a1 * N + b1 * T + c1 || loc0 == 0)
                && (nsnt < a2 * N + b2 * T + c2 || loc0 == 0)
                && ((nsnt < a2 * N + b2 * T + c2) || loc2 == 0)
                && (loc1 == 0))
        -> []((loc3 != 0) -> <>((loc0 == 0) && (loc1 == 0) && (loc2 == 0)));
  }
} /* Proc */


