/* a template for BOSCO */

skel Proc {
  /* the control locations are as follows:
    0 is the initial state with value 0,
    1 is the initial state with value 1,
    2 is the state with value 0 sent,
    3 is the state with value 1 sent,
    4 is the state "decided on 0",
    5 is the state "decided on 1",
    6 is the state "called underlying consensus with value 0",
    7 is the state "called underlying consensus with value 1",
   */
  local pc;
  /* the number of messages sent by the correct processes */
  shared nsnt0 /* sent 0 */, nsnt1 /* sent 1 */, nsnt01 /* the sum */;
  parameters N, T, F;
  /* the constants to be found by synthesis */
  unknowns a1, b1, a2, b2, a3, b3, a4, b4, a5, b5;


  assumptions (1) {
    a1 != 0; a2 != 0; a3 != 0; a4 != 0; a5 != 0;
    b1 != 0; b2 != 0; b3 != 0; b4 != 0; b5 != 0;
    N > 7 * T;
    T >= F;
    T >= 1;
  }

  locations (7) {
    loc0: [0]; loc1: [1]; loc2: [2]; loc3: [3];
    loc4: [4]; loc5: [5]; loc6: [6]; loc7: [7];
  }

  inits (8) {
    (loc0 + loc1) == N - F;
    loc2 == 0; loc3 == 0; loc4 == 0;
    loc5 == 0; loc6 == 0; loc7 == 7;
    nsnt0 == 0; nsnt1 == 0;
  }

  rules (0) {
  /* send message 0 (resp. 1) when initialized with value 1 (resp. 1) */
  0: loc0 -> loc2
      when (nsnt0 >= 0)
      do { nsnt0' == nsnt0 + 1; nsnt1' == nsnt1; nsnt01' == nsnt01 + 1; };
  1: loc1 -> loc3
      when (nsnt1 >= 0)
      do { nsnt0' == nsnt0; nsnt1' == nsnt1 + 1; nsnt01' == nsnt01 + 1; };
  /* decide immediately */
  2: loc2 -> loc4 /* decide on value 0 */
      when ((nsnt01 >= (a1 * N + b1 * T ) - 2 * F)
                && (nsnt0 >= a2 * N + b2 * T  - F))
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };
  3: loc3 -> loc5 /* decide on value 1 */
      when ((nsnt01 >= (a1 * N + b1 * T ) - 2 * F)
                && (nsnt1 >= a3 * N + b3 * T  - F))
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };

  /* fall back to the underlying consensus with a vote */
  4: loc2 -> loc6 /* underlying consensus 0 */
      when ((nsnt01 >= (a1 * N + b1 * T ) - 2 * F)
                && (nsnt0 < a2 * N + b2 * T  - F)
                && (nsnt1 < a3 * N + b3 * T  - F)
                && (nsnt0 >= a4 * N + b4 * T  - F)
                && (nsnt1 < a5 * N + b5 * T  - F))
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };
  5: loc3 -> loc6 /* underlying consensus 0 */
      when ((nsnt01 >= (a1 * N + b1 * T ) - 2 * F)
                && (nsnt0 < a2 * N + b2 * T  - F)
                && (nsnt1 < a3 * N + b3 * T  - F)
                && (nsnt0 >= a4 * N + b4 * T  - F)
                && (nsnt1 < a5 * N + b5 * T  - F))
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };
  6: loc2 -> loc7 /* underlying consensus 1 */
      when ((nsnt01 >= (a1 * N + b1 * T ) - 2 * F)
                && (nsnt0 < a2 * N + b2 * T  - F)
                && (nsnt1 < a3 * N + b3 * T  - F)
                && (nsnt0 < a4 * N + b4 * T  - F)
                && (nsnt1 >= a5 * N + b5 * T  - F))
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };
  7: loc3 -> loc7 /* underlying consensus 1 */
      when ((nsnt01 >= (a1 * N + b1 * T ) - 2 * F)
                && (nsnt0 < a2 * N + b2 * T  - F)
                && (nsnt1 < a3 * N + b3 * T  - F)
                && (nsnt0 < a4 * N + b4 * T  - F)
                && (nsnt1 >= a5 * N + b5 * T  - F))
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };

  /* fall through with the initial value */
  8: loc2 -> loc6 /* underlying consensus 0 */
      when ((nsnt01 >= (a1 * N + b1 * T ) - 2 * F)
                && (nsnt0 < a2 * N + b2 * T  - F)
                && (nsnt1 < a3 * N + b3 * T  - F)
                && (nsnt0 < a4 * N + b4 * T  - F)
                && (nsnt1 < a5 * N + b5 * T  - F))
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };
  9: loc3 -> loc7 /* underlying consensus 1 */
      when ((nsnt01 >= (a1 * N + b1 * T ) - 2 * F)
                && (nsnt0 < a2 * N + b2 * T  - F)
                && (nsnt1 < a3 * N + b3 * T  - F)
                && (nsnt0 < a4 * N + b4 * T  - F)
                && (nsnt1 < a5 * N + b5 * T  - F))
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };

  /* self loops */
  10: loc4 -> loc4
      when (nsnt0 >= 0 && nsnt1 >= 0)
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };
  11: loc5 -> loc5
      when (nsnt0 >= 0 && nsnt1 >= 0)
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };
  12: loc6 -> loc6
      when (nsnt0 >= 0 && nsnt1 >= 0)
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };
  13: loc7 -> loc7
      when (nsnt0 >= 0 && nsnt1 >= 0)
      do { nsnt0' == nsnt0; nsnt1' == nsnt1; nsnt01' == nsnt01; };
  }

  specifications (0) {
    /* liveness */
    one_step0: (loc1 == 0 -> [](loc5 == 0 && loc6 == 0 && loc7 == 0));
    one_step1: (loc0 == 0 -> [](loc4 == 0 && loc6 == 0 && loc7 == 0));

    /* safety */
    lemma3_0: (loc4 == 0) -> [](loc5 == 0);
    lemma3_1: (loc5 == 0) -> [](loc4 == 0);
    lemma4_0: (loc4 == 0) -> [](loc7 == 0);
    lemma4_1: (loc5 == 0) -> [](loc6 == 0);

    /* fast convergence */
    fast0:
        <>[](((nsnt01 < (a1 * N + b1 * T ) - 2 * F) || (loc2 == 0 && loc3 == 0))
                    && loc0 == 0 && loc1 == 0)
        ->
        (loc1 == 0
            -> <>(loc0 == 0 && loc1 == 0 && loc2 == 0 && loc3 == 0
                    && loc5 == 0 && loc6 == 0 && loc7 == 0));
    fast1:
        <>[](((nsnt01 < (a1 * N + b1 * T ) - 2 * F) || (loc2 == 0 && loc3 == 0))
                    && loc0 == 0 && loc1 == 0)
        ->
        (loc0 == 0
            -> <>(loc0 == 0 && loc1 == 0 && loc2 == 0 && loc3 == 0
                    && loc4 == 0 && loc6 == 0 && loc7 == 0));
  }
} /* Proc */


