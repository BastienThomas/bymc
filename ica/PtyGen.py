#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1193246798.3052001
__CHEETAH_genTimestamp__ = 'Wed Oct 24 21:26:38 2007'
__CHEETAH_src__ = 'PtyGen.tmpl'
__CHEETAH_srcLastModified__ = 'Sat Oct 14 21:41:14 2006'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class PtyGen(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  This is a Cheetah template to generate pty.
        # 
        #  Compile it with: cheetah compile PtyGen.tmpl
        write('''
# AUTOGENERATED, DO NOT EDIT MANUALLY!           
''')
        write('''# Autogenerated PTY code from Tiny Promela       

''')
        for builder in VFN(VFFSL(SL,"sys_builder.auto_builders",True),"values",False)(): # generated from line 9, col 1
            write('''proto ''')
            _v = VFFSL(SL,"builder.name",True) # '${builder.name}' on line 10, col 7
            if _v is not None: write(_filter(_v, rawExpr='${builder.name}')) # from line 10, col 7.
            write('''() {
''')
            for chan in VFFSL(SL,"builder.vpool.channels",True): # generated from line 11, col 5
                write('''    # channel ''')
                _v = VFFSL(SL,"chan.name",True) # '$chan.name' on line 12, col 16
                if _v is not None: write(_filter(_v, rawExpr='$chan.name')) # from line 12, col 16.
                write('''
''')
            write('''
''')
            for var_name in VFN(VFFSL(SL,"builder.vpool.vars",True),"keys",False)(): # generated from line 15, col 5
                var_type = VFN(VFFSL(SL,"builder.vpool",True),"vars",True)[VFFSL(SL,"var_name",True)]
                write('''
''')
                if VFFSL(SL,"var_type.get_type_name",True) == "Integer": # generated from line 18, col 9
                    write('''    int ''')
                    _v = VFFSL(SL,"var_name",True) # '$var_name' on line 19, col 9
                    if _v is not None: write(_filter(_v, rawExpr='$var_name')) # from line 19, col 9.
                    write(''';
''')
                if VFFSL(SL,"var_type.get_type_name",True) == "Enum": # generated from line 21, col 9
                    write('''
''')
                    comma = 0
                    write('''    enum { ''')
                    for v in VFFSL(SL,"var_type.get_values",True): # generated from line 24, col 12
                        if VFFSL(SL,"comma",True) == 1: # generated from line 24, col 44
                            write(''', ''')
                        _v = VFFSL(SL,"v",True) # '$v' on line 24, col 70
                        if _v is not None: write(_filter(_v, rawExpr='$v')) # from line 24, col 70.
                        comma = 1
                    write(''' } ''')
                    _v = VFFSL(SL,"var_name",True) # '$var_name' on line 24, col 100
                    if _v is not None: write(_filter(_v, rawExpr='$var_name')) # from line 24, col 100.
                    write(''';
''')
            write('''
    initial = [
''')
            ic = ""
            for i in VFFSL(SL,"builder.initial",True): # generated from line 30, col 5
                write('''        ''')
                _v = VFFSL(SL,"ic",True) # '$ic' on line 31, col 9
                if _v is not None: write(_filter(_v, rawExpr='$ic')) # from line 31, col 9.
                write(''' (''')
                pc = ""
                for pair in VFFSL(SL,"i",True): # generated from line 31, col 28
                    _v = VFFSL(SL,"pc",True) # '$pc' on line 31, col 45
                    if _v is not None: write(_filter(_v, rawExpr='$pc')) # from line 31, col 45.
                    write(''' ''')
                    _v = VFFSL(SL,"pair",True)[0] # '$pair[0]' on line 31, col 49
                    if _v is not None: write(_filter(_v, rawExpr='$pair[0]')) # from line 31, col 49.
                    write(''' = ''')
                    _v = VFFSL(SL,"pair",True)[1] # '$pair[1]' on line 31, col 60
                    if _v is not None: write(_filter(_v, rawExpr='$pair[1]')) # from line 31, col 60.
                    pc = ","
                write(''')
''')
                ic = ","
            write('''    ];

''')
            for t in VFFSL(SL,"builder.transitions",True): # generated from line 36, col 5
                if VFFSL(SL,"t.action_label",True) != "": # generated from line 37, col 9
                    if not VFFSL(SL,"t.feasible",True): # generated from line 38, col 1
                        write('''# not feasible -> ''')
                    _v = VFFSL(SL,"t.action_label",True) # '$t.action_label' on line 38, col 48
                    if _v is not None: write(_filter(_v, rawExpr='$t.action_label')) # from line 38, col 48.
                    write(''':
''')
                comma = 0
                if not VFFSL(SL,"t.feasible",True): # generated from line 41, col 1
                    write('''# not feasible -> ''')
                write('''    ''')
                for c in VFN(VFFSL(SL,"t",True),"condition",False)(): # generated from line 41, col 52
                    if VFFSL(SL,"comma",True) == 1: # generated from line 41, col 78
                        write(''', ''')
                    _v = VFFSL(SL,"c",True)[0] # '$c[0]' on line 41, col 104
                    if _v is not None: write(_filter(_v, rawExpr='$c[0]')) # from line 41, col 104.
                    write(''' = ''')
                    _v = VFFSL(SL,"c",True)[1] # '$c[1]' on line 41, col 112
                    if _v is not None: write(_filter(_v, rawExpr='$c[1]')) # from line 41, col 112.
                    comma = 1
                write(''' =>''')
                comma = 0
                write(''' ''')
                for a in VFN(VFFSL(SL,"t",True),"action",False)(): # generated from line 41, col 162
                    if VFFSL(SL,"comma",True) == 1: # generated from line 41, col 185
                        write(''', ''')
                    write(''' ''')
                    _v = VFFSL(SL,"a",True)[0] # '$a[0]' on line 41, col 212
                    if _v is not None: write(_filter(_v, rawExpr='$a[0]')) # from line 41, col 212.
                    write(''' = ''')
                    _v = VFFSL(SL,"a",True)[1] # '$a[1]' on line 41, col 220
                    if _v is not None: write(_filter(_v, rawExpr='$a[1]')) # from line 41, col 220.
                    comma = 1
                write(''';
''')
            write('''}

''')
        write('''
processes {
''')
        for p in VFFSL(SL,"processes",True): # generated from line 48, col 1
            write('''    ''')
            _v = VFFSL(SL,"p.name",True) # '$p.name' on line 49, col 5
            if _v is not None: write(_filter(_v, rawExpr='$p.name')) # from line 49, col 5.
            write(''' = new ''')
            _v = VFFSL(SL,"p.proctype.name",True) # '${p.proctype.name}' on line 49, col 19
            if _v is not None: write(_filter(_v, rawExpr='${p.proctype.name}')) # from line 49, col 19.
            write('''();
''')
        write('''}

links {
''')
        for l in VFFSL(SL,"links",True): # generated from line 54, col 1
            write('''    ''')
            _v = VFFSL(SL,"l",True)[0] # '$l[0]' on line 55, col 5
            if _v is not None: write(_filter(_v, rawExpr='$l[0]')) # from line 55, col 5.
            write(''' / ''')
            _v = VFFSL(SL,"l",True)[1] # '$l[1]' on line 55, col 13
            if _v is not None: write(_filter(_v, rawExpr='$l[1]')) # from line 55, col 13.
            write(''';
''')
        write('''}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_PtyGen= 'respond'

## END CLASS DEFINITION

if not hasattr(PtyGen, '_initCheetahAttributes'):
    templateAPIClass = getattr(PtyGen, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(PtyGen)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=PtyGen()).run()


