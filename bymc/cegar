#!/bin/bash

if [ "$#" -lt 2 ]; then
    echo "Not enough arguments"
    echo ""
    echo "Use: cegar promela_system property"
    exit 1
fi

trap "exit" SIGHUP SIGINT SIGTERM

PROG=$1
PROP=$2
BYMC_HOME=`dirname $0`

SPIN=spin
LTL2BA="$BYMC_HOME/../deps/ltl2ba-1.1/ltl2ba"
PANCC_FLAGS=${PANCC_FLAGS:-"-DVECTORSZ=2048 -DCOLLAPSE -DSC"}
PAN_FLAGS=${PAN_FLAGS:-"-m100000"}
SPIN_OUT="spin.out"
cmd=""
step="0"
rand=""
out=""

if [ ! -x "$LTL2BA" ]; then
    echo "WARNING: $LTL2BA is not found. Please go to `dirname $LTL2BA` and invoke make."
    echo "WARNING: using 'spin -f' instead of ltl2ba. Performance may degrade."
    echo "********************************************************************"
    LTL2BA="$SPIN"
fi

CUR_DIR=`pwd`
cd $BYMC_HOME
if [ "x$DEBUG" == "x" ]; then
    ./make.sh || (cd $CUR_DIR; exit 1)
    TOOL="$BYMC_HOME/run.native ${BYMC_FLAGS} "
else
    BYTE="1" ./make.sh || (cd $CUR_DIR; exit 1)
    TOOL="ocamldebug $BYMC_HOME/run.byte "
fi
cd $CUR_DIR

START_TIME=$(date +%s)

if [ "$CONTINUE" == "" ]; then
    CAMLRUNPARAM="b" $TOOL -a $PROG || exit 1
fi

rm -rf $SPIN_OUT spin.trace refinement.out

while [ "$cmd" != "q" ]; do
    echo "Converting the spec: !`head $PROP.ltl`..."
    #$SPIN -f "!`head $PROP.ltl`" >$PROP.never || (cat $PROP.never; exit 1)
    $LTL2BA -f "!`head $PROP.ltl`" >$PROP.never || (cat $PROP.never; exit 1)
    echo "Generating pan..."
    $SPIN -a -N $PROP.never abs-counter.prm || exit 2
    (gcc $rand $PANCC_FLAGS -o ./pan pan.c \
        && ./pan $PAN_FLAGS -a 2>&1 | tee $SPIN_OUT) || exit 3

    if egrep -q "errors: +0" $SPIN_OUT; then
        echo "The property is verified in $step refinement steps"
        out="|00:exitcode=ok|01:valid=yes|02:spurious=no"
        cmd="q"
    else
        ./pan -S | grep -v MSC | egrep '(^[A-Za-z0-9]*:GS{|START OF CYCLE)' > spin.trace \
        && CAMLRUNPARAM="b" $TOOL -t spin.trace $PROG 2>&1 | tee refinement.out
        echo -e "The trace in the ABSTRACT system (produced by spin):\n"
        echo -n "     0  "; head -n 1 spin.trace # start with 0
        tail -n '+2' spin.trace | cat -n | head -n 30
        echo ""
        
        if grep "trace-no-refinement" refinement.out; then
            if [ "$AUTO" == "" ]; then
                echo "Enter to try another trace, q<Enter> to exit"
                rand="-DT_RAND"
                read cmd
            else
                cmd="q"
            fi
        elif grep "error" refinement.out \
                || grep "trace-concrete-example" refinement.out; then
            echo "It took $step refinement steps"
            out="|00:exitcode=ok|01:valid=no|02:spurious=no"
            cmd="q"
        elif grep "trace-refined" refinement.out; then
            step=$((step+1))
            if [ "$DEBUG" != "" -o "$ASK" != "" ]; then
                echo "Enter to continue, q<Enter> to exit"
                read cmd
            fi
        else
            echo "Unknown refinement status. Aborted."
            cmd="q"
        fi
    fi
done

if [ "$out" == "" ]; then
    out="|00:exitcode=quit|01:valid=maybe|02:spurious=maybe"
fi

END_TIME=$(date +%s)
DIFF_TIME=$(($END_TIME-$START_TIME))

spin_data=`$BYMC_HOME/parse-spin-out.py $SPIN_OUT`
common="|03:refinements=$step|04:sys=`basename $PROG .pml`|05:spec=`basename $PROP .never`|06:total-sec=$DIFF_TIME"
echo "$out|$common|$spin_data" >>verdict.txt

