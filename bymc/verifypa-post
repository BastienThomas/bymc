#!/bin/bash
#
# Verify properties with SMT by partial order schema tree.
#
# Igor Konnov, 2014

# parse options
TEMPOPTS=`POSIXLY_CORRECT=1 getopt -o h --long help,limit-time:,limit-mem: -n '$@' -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

MEM_LIMIT="unlimited"
TIME_LIMIT="unlimited"

function help_and_quit() {
    echo "use $0 [switches] prog spec bymc_options"
    echo " where spec is one of those: all"
    echo " and the switches are"
    echo "  --limit-time: limit (in seconds) cpu time of subprocesses (ulimit -t)"
    echo "  --limit-mem: limit (in MB) virtual memory of subprocesses (ulimit -v)"
    echo "  -h|--help: show this help message"
    echo ""
    echo " bymc_options are as follows:"
    echo "  -O schema.tech=cav15        (do reachability as in the CAV'15 paper)"
    echo "  -O schema.tech=ltl          (default, the latest technique including liveness)"
    echo "  --smt 'lib2|z3|-in|-smt2'   (use z3 as the backend solver)"
    echo "  --smt 'yices'               (default, use yices as the backend solver)"
    echo "  --smt 'lib2|mysolver|arg1|arg2|arg3'  (use an SMT2 solver)"
    exit 1
}

eval set -- "$TEMPOPTS"
while true ; do
    case "$1" in
    -h|--help) help_and_quit ;;
    --limit-time) TIME_LIMIT=$2 ; shift 2 ;;
    --limit-mem) MEM_LIMIT=$((1024*$2)) ; shift 2 ;;
    --) shift ; break ;;
    *) echo "Internal error!" ; help_and_quit ;;
    esac
done

if [ "$#" -lt 2 ]; then
    help_and_quit
fi

PROG=$1
SPEC=$2
shift 2
export BYMC_FLAGS="$@ $BYMC_FLAGS"

echo ulimit -SHv $MEM_LIMIT
ulimit -SHv $MEM_LIMIT
echo ulimit -SHt $TIME_LIMIT
ulimit -SHt $TIME_LIMIT

# run the tool
export TARGET_MC=post
`dirname $0`/script/refinement-loop.sh $PROG $SPEC

